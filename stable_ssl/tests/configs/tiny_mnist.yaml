# @package _global_
defaults:
  - override /hydra/launcher: submitit_local

trainer:
  # ===== Base Trainer =====
  _target_: stable_ssl.SupervisedTrainer

  # ===== loss Parameters =====
  loss:
    _target_: torch.nn.CrossEntropyLoss

  # ===== Module Parameters =====
  module:
    backbone:
      _target_: stable_ssl.modules.Resnet9
      num_classes: 10
      in_channels: 1

  # ===== Optim Parameters =====
  optim:
    epochs: 1
    optimizer:
      _target_: stable_ssl.optimizers.LARS
      _partial_: True
      lr: 5
      weight_decay: 1e-6
    scheduler:
      _target_: torch.optim.lr_scheduler.ConstantLR
      _partial_: True
      factor: 1.0

  # ===== Data Parameters =====
  data:
    _num_classes: 10
    _num_train_samples: 600
    train: # training dataset as indicated by name 'train'
      _target_: torch.utils.data.DataLoader
      batch_size: 256
      drop_last: True
      shuffle: True
      num_workers: 6
      dataset:
        _target_: stable_ssl.data.HuggingFaceDataset
        path: "ylecun/mnist"
        split: "train[:1%]"
        trust_remote_code: true
        transform:
          _target_: torchvision.transforms.v2.Compose
          transforms:
            - _target_: torchvision.transforms.v2.ToImage
            - _target_: torchvision.transforms.v2.ToDtype
              dtype:
                _target_: stable_ssl.utils.str_to_dtype
                _args_: [float32]
              scale: True
    test: # can be any name
      _target_: torch.utils.data.DataLoader
      batch_size: 256
      num_workers: ${trainer.data.train.num_workers}
      dataset:
        _target_: stable_ssl.data.HuggingFaceDataset
        path: "ylecun/mnist"
        split: "test[:1%]"
        transform:
          _target_: torchvision.transforms.v2.Compose
          transforms:
            - _target_: torchvision.transforms.v2.ToImage
            - _target_: torchvision.transforms.v2.ToDtype
              dtype:
                _target_: stable_ssl.utils.str_to_dtype
                _args_: [float32]
              scale: True

  # ===== Logger Parameters =====
  logger:
    save_final_model: true
    eval_every_epoch: 1
    log_every_step: 1
    metric:
      test:
        acc1:
          _target_: torchmetrics.classification.MulticlassAccuracy
          num_classes: ${trainer.data._num_classes}
          top_k: 1
        acc5:
          _target_: torchmetrics.classification.MulticlassAccuracy
          num_classes: ${trainer.data._num_classes}
          top_k: 5

  # ===== Hardware Parameters =====
  hardware:
    seed: 0
    float16: true
    device: "cpu"
    world_size: 1

hydra:
  job:
    chdir: False
  launcher:
    tasks_per_node: ${trainer.hardware.world_size}
    cpus_per_task: ${trainer.data.train.num_workers}
    timeout_min: 1000
